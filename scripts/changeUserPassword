#!/bin/env bash
#
################################################################################
##
## File Name   : changeUserPassword
## Description : Change the PS User Id's password and updates Vault
## Author      : Nate Werner
## Created     : 11/10/2019
################################################################################
## Syntax      : changeUserPassword -a <app> -e <env> -u <UserId>
##
## Parameters  : -a <app>  : Optional, target app for password change
##             : -e <env>  : Target env for password change
##             : -u <userid> : PeopleSoft user id to change password for
##             :
## Example     : changeUserPassword -a cs -d dev -u UMIBADMIN
##
################################################################################

# load bootstrap dynamic path
currentPath="$( cd "$(dirname "$0")" && pwd )"
source ${currentPath%${currentPath#*scripts*/}}library/bootstrap.sh

# load needed libraries
source $LIB_HOME/inventory.sh
source $LIB_HOME/utilities.sh
source $LIB_HOME/security.sh

app=""
env=""
userId=""
toolsVersion=""

## common functions
function usageInfo()
{
   echo "Usage:"
   echo "  changeUserPassword.sh -a <app> -e <env> -u <userId>"
   echo "     Change a PeopleSoft UserId's password and update vault"
   echo "     To script, pass the userid password in env variable PS_USER_PWD"
   echo "     -a <app>  : (Required) App"
   echo "     -e <env>  : (Required) Env"
   echo "     -u <userId>: (Required) UserId to change password"
   echo "     -t <toolsVersion> : Tools version to use for the user that will change passwords (PS)"
   echo "     -h               : Display this help"
   echo
   echo " This will prompt for the new password unless the new password is set in the "
   echo "   environment variable 'PS_USER_PWD'"
   echo " FYI: The user 'PS' is used to access Peoplesoft to change passwords, changing PS"
   echo "   will change how other passwords are changed due to this use dependency!"
   echo " If there is an issue or case where PS password is changed, but is used to change other passwords"
   echo "   use the '-t 8.59.17', for example to point to the new password."
   echo " For example, you first run:"
   echo "      > changeUserPassword.sh -a <app> -e <env> -u PS"
   echo "   this changes the PS password, and will usually reflect a new patch version, but it used the old"
   echo "   password under 'psoft_pass.apppoweruser.pt859.pass' to login and change its password. Now further password changes"
   echo "   will need to use PS's new password to update other user's passwords."
   echo "   This can be done by running:"
   echo "      > changeUserPassword.sh -a <app> -e <env> -u APPSRV -t 8.59.17"
   echo "   This will lookup PS's password in the variable ''psoft_pass.apppoweruser.pt85917.pass' where we"
   echo "   usually setup new passwords."
   echo
   exit

}

######## Main program

# get user's paramters
while getopts ":ha:e:u:t:" optname; do
    case "$optname" in
      "a")
        app=$OPTARG
        ;;
      "e")
        env=$OPTARG
        ;;
      "u")
        userId=$OPTARG
        ;;
      "t")
        toolsVersion=$OPTARG
        ;;
      "h")
        usageInfo
        ;;
      "?")
        echo "Unknown option $OPTARG"
        usageInfo
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        usageInfo
        ;;
      *)
      # Should not occur
        echo "Unknown error while processing options"
        ;;
    esac
done

# verifiy required fields
if [[ -z "$env" ]]; then
  echo "Environment is required."
  usageInfo
fi

# setup log file for process
currentDate="$(date +%y%m%d_%H%M )"
passLogFile="$PS_SCRIPT_BASE/logs/changeUserPassword_${app}_${env}_${userId}_$currentDate.log"
util::setLogFile "$passLogFile"

# Setup Vault access
export ANSIBLE_LOG_PATH=/dev/null
sec::getandStoreVaultAccess
if [[ $? -ne 0 ]]; then
  util::log "ERROR" "Unable to setup vault access"
  exit 1
fi

# check if passed in with env variable
if [ -z "$PS_USER_PWD" ]; then
  echo -n "Enter new $app$env $userId Password:"
  read -s newUserPass
  echo
  echo -n "Re-Enter new $app$env $userId Password:"
  read -s newUserPass2
  echo

  if [[ "$newUserPass" != "$newUserPass2" ]]; then
    echo "Password does not match!"
    exit 1
  fi
else
  # Use password stored in env var
  newUserPass="$PS_USER_PWD"
fi

echo

# If no tools version is provided, lookp env current major tools version
if [ -z "$toolsVersion" ]; then
  majorToolsVer=$( inventory::getCurrentToolsAppEnv "fs" "$env" "prc")
  sec::getGenSecurity "ps${majorToolsVer:0:4}" changeUserPass
else
  # lookup password based on tools verison provided
  toolsVersion="${toolsVersion//.}"
  # now dynamically lookup each password and run script
  sec::getGenSecurity "psoft_pass.apppoweruser.pt${toolsVersion}.pass" changeUserPass
fi

echo

# only the $# seem to be safe with all various login scenarios
if [[ $newUserPass =~ ['@%^&*()+|{};:/?.'] ]]; then
  echo "An invalid character that can cause login problems was used ('@%^&*()+|{};:/?.').  Retry without these characters."
  exit 1
fi
if [[ "$userId" == "PS" ]]; then
  util::log "INFO" "Starting password change process for ${app}${env}'s PS"
else
  util::log "INFO" "Starting password change process for ${app}${env}'s $userId"
fi

# determine if updating all 4 apps as once
if [[ "$app" == "" ]]; then
  appList=( "cs" "fs" "hr" "ih" )
else
  appList=( "$app" )
fi

# apply password change to each app
for eachApp in ${appList[@]}; do
  # Setup DMS script
  util::log "DEBUG" "Starting changeUserPassword for $userId at ${eachApp}$env"
  # To run dms command we will determine where the scheduler is running and execute the dms there
  majorToolsVer=$( inventory::getCurrentToolsAppEnv "$eachApp" "$env" "prc")
  inventory::getDomainsByEnv "$eachApp" "$env" "prc" "main" "$majorToolsVer" domainList

  # Grab the first scheduler, we'll run it there
  # this design will use remote SSH to un DMS, but one can also setup local configs, and run from same host too.
  inventory::getDomainInfo "${domainList[0]}" "" "$majorToolsVer" domAttribs
  dmsHost="${domAttribs[$DOM_ATTR_HOST]}"
  util::log "DEBUG" "Using ${domAttribs[$DOM_ATTR_HOST]} from domain ${domainList[0]} to run psdmtx"

  configFile="/psoft/admin/tmp/.dmxcfg${currentDate}.txt"
  scriptFile="/psoft/admin/tmp/.accessid${currentDate}.dms"
  # Appsian Firewall:  Maintain guest users in GH Tables.
  echo "update PSOPRDEFN set PTOPERPSWDV2 = '$newUserPass', OPERPSWDSALT = ' ', OPERPSWD = ' ', ENCRYPTED = 0 where OPRID = '$userId';" > $scriptFile
  case "$userId" in
    "GUEST_SUPL")
      echo "update PS_GS_ACTION_DEFN set OPERPSWD = '$newUserPass' where GS_ACTION_ID = 'SW_GUEST_SUPL';" >> $scriptFile
      ;;
    "GUEST_CG")
      echo "update PS_GS_ACTION_DEFN set OPERPSWD = '$newUserPass' where GS_ACTION_ID = 'SW_GUEST_CG';" >> $scriptFile
      ;;
  esac

  echo "ENCRYPT_PASSWORD $userId;" >> $scriptFile

  #Write config
  cat <<EOT > $configFile
-CT ORACLE
-CD ${eachApp^^}${env^^}
-CO PS
-CP "$changeUserPass"
-FP $scriptFile
EOT

  # Now run script on scheduler
  # this design will use remote SSH to un DMS, but one can also setup local configs, and run from same host too.
  util::log "DEBUG" "Running DMS: $SSH_CMD $dmsHost \"source $eachApp$env.env && PS_SERVER_CFG=\$PS_CFG_HOME/appserv/prcs/$eachApp$env/psprcs.cfg psdmtx $configFile\""
  dmsResult=$( $SSH_CMD $dmsHost "source $eachApp$env.env && PS_SERVER_CFG=\$PS_CFG_HOME/appserv/prcs/$eachApp$env/psprcs.cfg psdmtx $configFile" )
  dmsExitCode=$?
  # DMX will auto delete the config file, but script needs to be cleared
  rm $scriptFile
  if [ -e $configFile ]; then
     rm $configFile
  fi
  util::log "DEBUG" "DMS Exit Code: $dmsExitCode, Result: $dmsResult"
  # Check for errors
  if [[ "$dmsResult" == *"Successful completion"* ]]; then
     util::log "INFO" "DMS Change User Password Successful in $eachApp$env."
  else
     util::log "ERROR" "Failed to run DMS Change User Password, aborting, Results:  $dmsResult"
     exit 1
  fi

done
util::log "INFO" "Make sure to update ansible vault with new password"
#END
