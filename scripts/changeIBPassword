#!/bin/env bash
#
################################################################################
##
## File Name   : changeIBPassword
## Description : Change the IB Node password for all nodes in Unified Nav
## Author      : Nate Werner
## Created     : 11/10/2019
################################################################################
## Syntax      : changeIBPassword -e <env> 
##
## Parameters  : -e <env>  : Target env for IB Node password change
##             :
## Example     : changeIBPassword -e dev
##
################################################################################

# load bootstrap dynamic path
currentPath="$( cd "$(dirname "$0")" && pwd )"
source ${currentPath%${currentPath#*scripts*/}}library/bootstrap.sh

# load needed libraries
source $LIB_HOME/inventory.sh
source $LIB_HOME/utilities.sh
source $LIB_HOME/security.sh

app=""
env=""
userId=""
toolsVersion=""

## common functions
function usageInfo()
{
   echo "Usage:"
   echo "  changeIBPassword -e <env>"
   echo "     Change a PeopleSoft IB Node password for full env"
   echo "     -e <env>  : (Required) Env"
   echo "     -h               : Display this help"
   echo
   echo "Sample: changeIBPassword -e dev"
   echo
   exit

}

######## Main program

# get user's paramters
while getopts ":he:" optname; do
    case "$optname" in
      "e")
        env=$OPTARG
        ;;
      "h")
        usageInfo
        ;;
      "?")
        echo "Unknown option $OPTARG"
        usageInfo
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        usageInfo
        ;;
      *)
      # Should not occur
        echo "Unknown error while processing options"
        ;;
    esac
done

# verifiy required fields
if [[ -z "$env" ]]; then
  echo "Environment is required."
  usageInfo
fi

# setup log file for process
currentDate="$(date +%y%m%d_%H%M )"
passLogFile="$PS_SCRIPT_BASE/logs/utilities/changIBPassword_${app}_${env}_${userId}_$currentDate.log"
util::setLogFile "$passLogFile"

# Setup Vault access
export ANSIBLE_LOG_PATH=/dev/null
sec::getandStoreVaultAccess
if [[ $? -ne 0 ]]; then
  util::log "ERROR" "Unable to setup vault access"
  exit 1
fi

# Get the PS password
majorToolsVer=$( inventory::getCurrentToolsAppEnv "cs" "$env" "prc")
sec::getGenSecurity "ps${majorToolsVer:0:4}" changeUserPass

# check if passed in with env variable
if [ -z "$PS_USER_PWD" ]; then
  echo -n "Enter new IB Node Password for $env:"
  read -s newIBPass
  echo
  echo -n "Re-Enter new IB Node Password for $env:"
  read -s newIBPass2
  echo

  if [[ "$newIBPass" != "$newIBPass2" ]]; then
    echo "Password does not match!"
    exit 1
  fi
else
  # Use password stored in env var
  newUserPass="$PS_IB_PWD"
fi

# Clear cache
if [ -e /psoft/dms/PS_CACHE ]; then
  rm -rf /psoft/dms/PS_CACHE
fi

util::log "INFO" "Starting IB Node password change process for ${env}"

appList=( "cs" "fs" "hr" "ih" )

# apply password change to each app
for eachApp in ${appList[@]}; do

  # Setup DMS script
  util::log "DEBUG" "Starting changeIBPassword at ${eachApp}$env"

  # To run psae command we will determine where the scheduler is running and execute the AE there
  majorToolsVer=$( inventory::getCurrentToolsAppEnv "$eachApp" "$env" "prc")
  inventory::getDomainsByEnv "$eachApp" "$env" "prc" "" "$majorToolsVer" domainList

  # Grab the first scheduler, we'll run it there
  inventory::getDomainInfo "${domainList[0]}" "" "$majorToolsVer" domAttribs
  AEHost="${domAttribs[$DOM_ATTR_HOST]}"

  util::log "DEBUG" "Using ${domAttribs[$DOM_ATTR_HOST]} from domain ${domainList[0]} to run psae"

  configFile="/psoft/admin/tmp/.aecfg${currentDate}.txt"
  templateFile=".template_${currentDate}.txt"
  # add dynamic support for tools version
  toolsVer="${domAttribs[$DOM_ATTR_TOOLSVER]}"

  # Write dynamic ACM Template
  # Our sample uses a common node name structure where the env is at the end of the name.
  cat <<EOT > /psoft/admin/tmp/$templateFile
template_name=UM_IB_NODE_PASS

#Tools_release=$toolsVer
#Apps_release=HRMS 9.20.00.000

configure=true
verify=true
decrypt_password=false

#Group:UM_IB
#Description:Set Node Passord

##### Configure the DB node#####

plugin.UM_IB.1=PTEM_CONFIG_UM:UMIBConfigureNode

#Default local node password
env.node_pass=$newIBPass

#Node CheckTokenId
env.check_token_id=

#Default local node
env.node=PSFT_CS_CS${env^^}

plugin.UM_IB.2=PTEM_CONFIG_UM:UMIBConfigureNode

#Default local node password
env.node_pass=$newIBPass

#Node CheckTokenId
env.check_token_id=

#Default local node
env.node=PSFT_FS_FS${env^^}

plugin.UM_IB.3=PTEM_CONFIG_UM:UMIBConfigureNode

#Default local node password
env.node_pass=$newIBPass

#Node CheckTokenId
env.check_token_id=

#Default local node
env.node=PSFT_HR_HR${env^^}

plugin.UM_IB.4=PTEM_CONFIG_UM:UMIBConfigureNode

#Default local node password
env.node_pass=$newIBPass

#Node CheckTokenId
env.check_token_id=

#Default local node
env.node=PSFT_IH_IH${env^^}

EOT

  #Write config
  cat <<EOT > $configFile
-CT ORACLE
-CD ${eachApp^^}${env^^}
-CO PS
-CP "$changeUserPass"
-R RUNACM01
-AI PTEM_CONFIG
-QUIET Y
-I
EOT

  # Now run ACM on scheduler
  # this design will use remote SSH to un DMS, but one can also setup local configs, and run from same host too.
  util::log "DEBUG" "Running AE: $SSH_CMD $AEHost \"source $eachApp$env.env && PS_SERVER_CFG=\$PS_CFG_HOME/appserv/prcs/$eachApp$env/psprcs.cfg PS_FILEDIR=/psoft/admin/tmp PTEM_PROMPT_USER=false PTEM_PROP=$templateFile psae $configFile\""
  aeResult=$( $SSH_CMD $AEHost "source $eachApp$env.env && PS_SERVER_CFG=\$PS_CFG_HOME/appserv/prcs/$eachApp$env/psprcs.cfg PS_FILEDIR=/psoft/admin/tmp PTEM_PROMPT_USER=false PTEM_PROP=$templateFile psae $configFile" )
  aeExitCode=$?
  # AE will auto delete the config file, but template needs to be cleared
  rm /psoft/admin/tmp/$templateFile
  if [ -e $configFile ]; then
     rm $configFile
  fi
  util::log "DEBUG" "DMS Exit Code: $aeExitCode, Result: $aeResult"
  # Check for errors
  if [[ "$aeResult" == *"Completed environment configuration"* ]]; then
     util::log "INFO" "AE Change IB Node Password Successful for $eachApp$env."
  else
     util::log "ERROR" "Failed to run AE Change IB Node Password, aborting, Results:  $aeResult"
     exit 1
  fi

done
util::log "INFO" "Make sure to update ansible vault with new password"

#END
